import PropositionSchedulerBuilder from "./proposition_scheduler/PropositionSchedulerBuilder.js"
import Proposition from "./proposition/Proposition.js"

/**
 * A lesson is mainly a list of Propositions.
 * The constructor takes the json generated by a LessonBuilder.
 */
export default class Lesson {

    constructor(jsonData) {
        this.metadata = jsonData.metadata
        this.explanationText = jsonData.explanation.text

        let id = this.getId()
        let propositions = jsonData.propositions.map(p => { return new Proposition(p) })
        this.scheduler = PropositionSchedulerBuilder.getScheduler(id, propositions)
    }

    /**
     * Point to the next proposition.
     * Decide if the lesson is over or not
     */
    next() {
        this.scheduler.next()
    }

    /**
     * Get the current Proposition.
     * @returns Proposition
     */
    getCurrent() {
        return this.scheduler.getCurrent()
    }

    /**
     * Is this lesson over yet?
     * @returns boolean
     */
    isOver() {
        return this.scheduler.isOver()
    }

    /**
     * Get average score.
     * @returns number
     */
    getScore() {
        return this.scheduler.overallScore()
    }


    //TODO: better looking id
    /**
     * Nominally identifies a Lesson.
     * @returns {string}
     */
    getId(){
        return this.metadata.author + this.metadata.target_language + this.metadata.source_language + this.metadata.title 
    }

    
}
