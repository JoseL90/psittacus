import Proposition from "./proposition.js"

/**
 * A lesson is mainly a list of Propositions.
 * The constructor takes the json generated by a LessonBuilder.
 */
export default class Lesson {

    constructor(jsonData) {
        this.propositions = jsonData.propositions.map(p => { return new Proposition(p) })
        this.iterator = this.propositions.values()
        this.next()
        this.lesson_over = false
        this.explanationText = jsonData.explanation.text
    }

    /**
     * Point to the next proposition.
     * Decide if the lesson is over or not
     */
    next() {

        this.current = this.iterator.next().value

        //list of 'questions' user failed at
        this.screwedUpPropositions = this.propositions.filter((p) => { return p.getScore() < Proposition.MIN_PASSING_SCORE })

        //lesson not over yet, if at least one fail
        if (this.screwedUpPropositions.length > 0) {
            return
        }

        //lesson over, if current Proposition undefined, and no screwed up propositions.
        if (!this.current) {
            this.lesson_over = true
        }

    }

    /**
     * Get current Proposition, else get first 
     * screwed up Proposition, else get NULL Proposition.
     * @returns Proposition
     */
    getCurrent() {
        return this.current ?? this.screwedUpPropositions[0] ?? Proposition.NULL
    }

    /**
     * Is this lesson over yet?
     * @returns boolean
     */
    isOver() {
        return this.lesson_over
    }

    /**
     * Get average score.
     * @returns number
     */
    getScore() {
        return parseInt(this.propositions.map((p) => { return p.getScore() }).reduce((a, b) => { return a + b }) / this.propositions.length)
    }

    
}
